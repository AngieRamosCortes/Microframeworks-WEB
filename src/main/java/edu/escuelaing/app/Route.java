package edu.escuelaing.app;

/**
 * Represents a single route in the web framework.
 * A route consists of an HTTP method, a path pattern, and a handler function.
 * This class encapsulates the routing information for matching incoming
 * requests.
 * 
 * @author Angie Ramos
 * @version 1.0
 */
public class Route {

    private final String method;
    private final String path;
    private final RouteHandler handler;

    /**
     * Constructor to create a new route definition.
     *
     * @param method  The HTTP method this route responds to (GET, POST, etc.)
     * @param path    The URL path pattern for this route
     * @param handler The function that handles requests to this route
     */
    public Route(String method, String path, RouteHandler handler) {
        this.method = method.toUpperCase();
        this.path = path;
        this.handler = handler;
    }

    /**
     * Gets the HTTP method for this route.
     *
     * @return The HTTP method as an uppercase string
     */
    public String getMethod() {
        return method;
    }

    /**
     * Gets the path pattern for this route.
     *
     * @return The path pattern as a string
     */
    public String getPath() {
        return path;
    }

    /**
     * Gets the handler function for this route.
     *
     * @return The RouteHandler function
     */
    public RouteHandler getHandler() {
        return handler;
    }

    /**
     * Checks if this route matches the given method and path.
     * Performs exact matching for both method and path.
     *
     * @param requestMethod The HTTP method of the incoming request
     * @param requestPath   The path of the incoming request
     * @return true if this route matches the request, false otherwise
     */
    public boolean matches(String requestMethod, String requestPath) {
        return this.method.equals(requestMethod.toUpperCase()) &&
                this.path.equals(requestPath);
    }

    /**
     * Executes the route handler with the given request and response objects.
     *
     * @param request  The HTTP request object
     * @param response The HTTP response object
     * @return The response body generated by the handler
     */
    public String execute(Request request, Response response) {
        return handler.handle(request, response);
    }

    /**
     * Returns a string representation of this route for debugging purposes.
     *
     * @return A string describing this route
     */
    @Override
    public String toString() {
        return method + " " + path;
    }
}
